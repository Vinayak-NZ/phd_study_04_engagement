ggplot(table_education,
aes(fill = ausbildung,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#e66100",
"#fefe62",
"#d35fb7",
"#e18b22",
"#4739a2"),
labels = labels.ed) +
labs(title = paste0("Education level"),
subtitle = "Bar chart of highest qualification obtained",
caption = "Data source: TeamBaby",
fill = "Education") +
xlab("Education") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
app_baseline_valid_family <-
app_baseline[app_baseline$familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_baseline_valid_family$familie <-
ifelse(app_baseline_valid_family$familie %in% c(0,1),
"RS1",
ifelse(app_baseline_valid_family$familie == 2,
"RS2",
ifelse(app_baseline_valid_family$familie == 3,
"RS3", "RS4")))
level_order <- c("RS1",
"RS2",
"RS3",
"RS4")
labels.fm <- c(RS1 = 'RS1 = Single',
RS2 = 'RS2 = Committed relationship and not registered',
RS3 = 'RS3 = Married/ Registered',
RS4 = 'RS4 = Divorced')
table_family <- as.data.frame(
table(app_baseline_valid_family$version,
app_baseline_valid_family$familie))
names(table_family)[names(table_family) == "Var1"] <-
"version"
names(table_family)[names(table_family) == "Var2"] <-
"familie"
names(table_family)[names(table_family) == "Freq"] <-
"frequency"
ggplot(table_family,
aes(fill = familie,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#4739a2",
"#e18b22"),
labels = labels.fm) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby",
fill = "Relationship status") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt")
)
ggplot(table_family,
aes(fill = familie,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#4739a2",
"#e18b22"),
labels = labels.fm) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby",
fill = "Relationship status") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
ggplot(table_education,
aes(fill = ausbildung,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#4739a2",
"#e18b22",
"#fefe62",
"#d35fb7",
"#009e73"),
labels = labels.ed) +
labs(title = paste0("Education level"),
subtitle = "Bar chart of highest qualification obtained",
caption = "Data source: TeamBaby",
fill = "Education") +
xlab("Education") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
app_baseline_demo <- rbind(app_v1_baseline_demo,
app_v2_baseline_demo)
# age
t_test_age <- t.test(alter ~ version,
app_baseline_valid_age,
var.equal=TRUE)
t_test_age
# education level
chi_square_education <- chisq.test(
table(app_baseline_valid_education$version,
app_baseline_valid_education$ausbildung))
chi_square_education
# relationship status
chi_square_fam <- chisq.test(
table(app_baseline_valid_family$version,
app_baseline_valid_family$familie))
chi_square_fam
# partial-eta-squared
eta_squared <- function(model) {
SSeffect <- summary(aov(model))[[1]]["Sum Sq"]
SSerror <- sum(SSeffect) - SSeffect
eta_sq <- SSeffect / sum(SSeffect, SSerror)
return(eta_sq)
}
## ---- prep-data
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_app_v2_baseline.R")
source("R/02_format_baseline_all.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
source("R/06_model_engagement.R")
eta_squared(model_4)
model_4
install.packages("heplots")
library(heplots)
manova_model <- Anova(model_4, type = "III")
eta_squared(manova_model)
model_4
model_4[[1]]
model_4[[2]]
eta_squared(lm_total_log_in)
eta_total_log_in <- eta_squared(lm_total_log_in)
eta_progress_score <- eta_squared(lm_progress_score)
eta_action_plan <- eta_squared(lm_action_plan)
eta_average_time_spent <- eta_squared(lm_average_time_spent)
eta_days_between <- eta_squared(lm_days_between)
eta_progress_score
eta_action_plan
eta_average_time_spent
eta_days_between
renv::snapshot()
## ---- prep-data
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_app_v2_baseline.R")
source("R/02_format_baseline_all.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
app_baseline_valid <- app_baseline_demo[app_baseline_demo$alter > 18, ]
app_baseline_valid_age <-
app_baseline_valid[!is.na(app_baseline_valid$alter), ]
ggplot(app_baseline_valid_age, aes(x = alter, fill = version)) +
geom_density(alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#46e7fd", "#e18b22")) +
labs(title = paste0("Distribution of age"),
subtitle = "Histogram of age of participants in study",
caption = "Data source: TeamBaby",
fill = "Web-app version") +
xlab("Age") +
ylab("Count") +
xlim(0, 60) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
app_baseline_valid_education <-
app_baseline_demo[app_baseline_demo$ausbildung %in%
c(0, 1, 2, 3, 4, 5, 6, 7), ]
app_baseline_valid_education$ausbildung <-
ifelse(app_baseline_valid_education$ausbildung %in% c(0,1),
1,
app_baseline_valid_education$ausbildung)
app_baseline_valid_education$ausbildung <-
ifelse(app_baseline_valid_education$ausbildung == 1,
"L1",
ifelse(app_baseline_valid_education$ausbildung == 2,
"L2",
ifelse(app_baseline_valid_education$ausbildung == 3,
"L3",
ifelse(app_baseline_valid_education$ausbildung == 4,
"L4",
ifelse(app_baseline_valid_education$ausbildung == 5,
"L5",
ifelse(app_baseline_valid_education$ausbildung == 6,
"L6", "L7"))))))
labels.ed <- c(L1 = 'L1 = No school-leaving qualification',
L2 = 'L2 = Secondary/ elementary school',
L3 = 'L3 = Secondary school diploma',
L4 = 'L4 = A-levels',
L5 = 'L5 = Completed vocational training',
L6 = 'L6 = University degree - Hochschule',
L7 = 'L7 = University degree')
table_education <- as.data.frame(
table(app_baseline_valid_education$version,
app_baseline_valid_education$ausbildung))
names(table_education)[names(table_education) == "Var1"] <-
"version"
names(table_education)[names(table_education) == "Var2"] <-
"ausbildung"
names(table_education)[names(table_education) == "Freq"] <-
"frequency"
ggplot(table_education,
aes(fill = ausbildung,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#4739a2",
"#e18b22",
"#fefe62",
"#d35fb7",
"#009e73"),
labels = labels.ed) +
labs(title = paste0("Education level"),
subtitle = "Bar chart of highest qualification obtained",
caption = "Data source: TeamBaby",
fill = "Education") +
xlab("Education") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
app_baseline_valid_family <-
app_baseline_demo[app_baseline_demo$familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_baseline_valid_family$familie <-
ifelse(app_baseline_valid_family$familie %in% c(0,1),
"RS1",
ifelse(app_baseline_valid_family$familie == 2,
"RS2",
ifelse(app_baseline_valid_family$familie == 3,
"RS3", "RS4")))
level_order <- c("RS1",
"RS2",
"RS3",
"RS4")
labels.fm <- c(RS1 = 'RS1 = Single',
RS2 = 'RS2 = Committed relationship and not registered',
RS3 = 'RS3 = Married/ Registered',
RS4 = 'RS4 = Divorced')
table_family <- as.data.frame(
table(app_baseline_valid_family$version,
app_baseline_valid_family$familie))
names(table_family)[names(table_family) == "Var1"] <-
"version"
names(table_family)[names(table_family) == "Var2"] <-
"familie"
names(table_family)[names(table_family) == "Freq"] <-
"frequency"
ggplot(table_family,
aes(fill = familie,
y = frequency,
x = version)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = c("#000",
"#46e7fd",
"#4739a2",
"#e18b22"),
labels = labels.fm) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby",
fill = "Relationship status") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
ggplot(app_baseline_valid_age, aes(x = alter, fill = version)) +
geom_density(alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#46e7fd", "#e18b22")) +
labs(title = paste0("Distribution of age"),
subtitle = "Histogram of age of participants in study",
caption = "Data source: TeamBaby",
fill = "Web-app version") +
xlab("Age") +
ylab("Density") +
xlim(0, 60) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
source("R/06_model_engagement.R")
eta_total_log_in
lm_total_log_in
model_4
model_summary
eta_total_log_in
eta_progress_score
eta_action_plan
eta_average_time_spent
eta_days_between
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_app_v2_baseline.R")
source("R/02_format_baseline_all.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
source("R/06_analyse_socio_demographics.R")
source("R/09_visualise_socio_demographics.R")
source("R/06_analyse_socio_demographics.R")
t_test_age
chi_square_education
chi_square_fam
## ---- prep-data
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_app_v2_baseline.R")
source("R/02_format_baseline_all.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
source("R/09_visualise_engagement_1_frequency.R")
source("R/09_visualise_engagement_2_intensity.R")
source("R/09_visualise_engagement_3_duration.R")
library(rstatix)
?cohens_d
t_test_log_in_effect_size <-
cohens_d(data_log_in,
total_log_in ~ version,
var.equal = TRUE)
t_test_log_in_effect_size
t_test_log_in_pages_effect_size <-
cohens_d(pages,
proption_viewed ~ version,
var.equal = TRUE)
t_test_log_in_pages_effect_size
t_test_lessons_effect_size <-
cohens_d(lessons,
lessons_viewed ~ version,
var.equal = TRUE)
t_test_lessons_effect_size
t_test_open_items_effect_size <-
cohens_d(open_items,
proportion_completed ~ version,
var.equal = TRUE)
t_test_open_items_effect_size
chisq_action_plan
action_plan
View(action_plan)
t_test_open_items_effect_size
chisq_action_plan
table(action_plan$version, action_plan$action_plan)
test <- table(action_plan$version, action_plan$action_plan)
chisq.test(test, correct = FALSE)
# cramers-v-function
cramers_V <- function(chi, n, df){
output <- sqrt((chi) / (n * df))
return(output)
}
action_plan_table_count <- table(action_plan$version,
action_plan$action_plan)
dim(action_plan_table_count)
chisq_action_plan$statistic
action_plan_effect_size <- cramers_V(chi = chisq_action_plan$statistic,
n = sum(action_plan_table_count),
df = action_chi_square_df)
action_chi_square_df <- min(dim(action_plan_count)) - 1
action_plan_effect_size <- cramers_V(chi = chisq_action_plan$statistic,
n = sum(action_plan_table_count),
df = action_chi_square_df)
action_plan_table_count <- table(action_plan$version,
action_plan$action_plan)
action_chi_square_df <- min(dim(action_plan_table_count)) - 1
action_plan_effect_size <- cramers_V(chi = chisq_action_plan$statistic,
n = sum(action_plan_table_count),
df = action_chi_square_df)
action_plan_effect_size
t_test_time_spent_effect_size <-
cohens_d(time_visit,
time_spent_visit ~ version,
var.equal = TRUE)
t_test_time_spent
time_visit
t_test_time_spent_effect_size <-
cohens_d(time_visit,
time_spent_visit ~ version,
var.equal = TRUE)
t_test_time_spent
t_test_days_between_effect_size <-
cohens_d(days_data,
days_between ~ version,
var.equal = TRUE)
t_test_log_in_pages_effect_size <-
cohens_d(pages,
proption_viewed ~ version,
var.equal = TRUE)
View(days_data)
time_visit$version <- factor(time_visit$version)
t_test_time_spent_effect_size <-
cohens_d(time_visit,
time_spent_visit ~ version,
var.equal = TRUE)
time_visit$version
time_visit$time_spent_visit
typeof(time_visit$time_spent_visit)
time_visit$time_spent_visit <- as.numeric(time_visit$time_spent_visit)
typeof(time_visit$time_spent_visit)
t_test_time_spent_effect_size <-
cohens_d(time_visit,
as.numeric(time_spent_visit) ~ version,
var.equal = TRUE)
t_test_time_spent_effect_size <-
cohens_d(time_visit,
time_spent_visit ~ version,
var.equal = TRUE)
t_test_time_spent_effect_size
## ---- days-between-test
t_test_days_between <- t.test(days_between ~ version,
days_data,
var.equal=TRUE)
days_data$days_between <- as.numeric(days_data$days_between)
t_test_days_between_effect_size <-
cohens_d(days_data,
days_between ~ version,
var.equal = TRUE)
t_test_days_between_effect_size
chisquare_input
sentiment_chi_square_df <- min(dim(chisquare_input)) - 1
sentiment_chi_square_df
sum(chisquare_input)
sentiment_chi_square_df <- min(dim(chisquare_input)) - 1
sentiment_chi_square_effect_size <-
cramers_V(chi = chi_square_stat$statistic,
n = sum(chisquare_input),
df = sentiment_chi_square_df)
chi_square_stat <- chisq.test(chisquare_input,
correct = FALSE)
sentiment_chi_square_df <- min(dim(chisquare_input)) - 1
sentiment_chi_square_effect_size <-
cramers_V(chi = chi_square_stat$statistic,
n = sum(chisquare_input),
df = sentiment_chi_square_df)
sentiment_chi_square_effect_size
