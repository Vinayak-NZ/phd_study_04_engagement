knitr::read_chunk("R/02_format_active_data_safety.R")
knitr::read_chunk("R/02_format_baseline.R")
knitr::read_chunk("R/02_join_data.R")
knitr::read_chunk("R/03_prepare_data.R")
knitr::read_chunk("R/04_derive_variables.R")
knitr::read_chunk("R/04_process_app_use_data.R")
knitr::read_chunk("R/04_process_sentiment_data.R")
knitr::read_chunk("R/06_chi_square_sentiment.R")
knitr::read_chunk("R/06_mann_whitney_user_feedback.R")
knitr::read_chunk("R/06_model_engagement.R")
knitr::read_chunk("R/08_create_output_tables.R")
knitr::read_chunk("R/09_visualise_engagement_1_frequency.R")
knitr::read_chunk("R/09_visualise_engagement_2_intensity.R")
knitr::read_chunk("R/09_visualise_engagement_3_duration.R")
knitr::read_chunk("R/09_visualise_sentiment.R")
knitr::read_chunk("R/09_socio_demographics.R")
knitr::read_chunk("R/00_load_data.R")
knitr::read_chunk("R/00_load_functions.R")
knitr::read_chunk("R/00_load_package.R")
knitr::read_chunk("R/01_format_active_data.R")
knitr::read_chunk("R/01_format_passive_data.R")
knitr::read_chunk("R/02_format_active_data_feedback.R")
knitr::read_chunk("R/02_format_active_data_hapa.R")
knitr::read_chunk("R/02_format_active_data_safety.R")
knitr::read_chunk("R/02_format_baseline.R")
knitr::read_chunk("R/02_join_data.R")
knitr::read_chunk("R/03_prepare_data.R")
knitr::read_chunk("R/04_derive_variables.R")
knitr::read_chunk("R/04_process_app_use_data.R")
knitr::read_chunk("R/04_process_sentiment_data.R")
knitr::read_chunk("R/06_chi_square_sentiment.R")
knitr::read_chunk("R/06_mann_whitney_user_feedback.R")
knitr::read_chunk("R/06_model_engagement.R")
knitr::read_chunk("R/08_create_output_tables.R")
knitr::read_chunk("R/09_visualise_engagement_1_frequency.R")
knitr::read_chunk("R/09_visualise_engagement_2_intensity.R")
knitr::read_chunk("R/09_visualise_engagement_3_duration.R")
knitr::read_chunk("R/09_visualise_sentiment.R")
knitr::read_chunk("R/09_visualise_socio_demographics.R")
knitr::read_chunk("R/09_visualise_user_feedback.R")
?mice
??mice
## ---- prep-data
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_baseline.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
app_v1_baseline_valid_family <-
app_v1_baseline[app_v1_baseline$Familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_v1_baseline_valid_family$Familie <-
ifelse(app_v1_baseline_valid_family$Familie %in% c(0,1),
"Single",
ifelse(app_v1_baseline_valid_family$Familie == 2,
"Committed relationship",
ifelse(app_v1_baseline_valid_family$Familie == 3,
"Married/ Registered", "Divorced")))
level_order <- c("Single",
"Committed \n relationship",
"Married/ \n Registered",
"Divorced")
ggplot(data = app_v1_baseline_valid_family, aes(x = factor(Familie, level = level_order))) +
geom_bar(stat = "count", fill = "#4739a2") +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
)
app_v1_baseline_valid_family <-
app_v1_baseline[app_v1_baseline$Familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_v1_baseline_valid_family$Familie <-
ifelse(app_v1_baseline_valid_family$Familie %in% c(0,1),
"Single",
ifelse(app_v1_baseline_valid_family$Familie == 2,
"Committed relationship",
ifelse(app_v1_baseline_valid_family$Familie == 3,
"Married/ Registered", "Divorced")))
level_order <- c("Single",
"Committed relationship",
"Married/ Registered",
"Divorced")
ggplot(data = app_v1_baseline_valid_family, aes(x = factor(Familie, level = level_order))) +
geom_bar(stat = "count", fill = "#4739a2") +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
)
app_v1_baseline_valid_family <-
app_v1_baseline[app_v1_baseline$Familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_v1_baseline_valid_family$Familie <-
ifelse(app_v1_baseline_valid_family$Familie %in% c(0,1),
"RS1",
ifelse(app_v1_baseline_valid_family$Familie == 2,
"RS2",
ifelse(app_v1_baseline_valid_family$Familie == 3,
"RS3", "RS4")))
level_order <- c("RS1",
"RS2",
"RS3",
"RS4")
labels <- c(RS1 = 'RS1 = Single',
RS2 = 'RS2 = Committed relationship',
RS3 = 'RS3 = Married/ Registered',
RS4 = 'RS4 = Divorced')
ggplot(data = app_v1_baseline_valid_family, aes(x = Familie, fill = Familie)) +
geom_bar(key_glyph = draw_key_blank) +
scale_fill_manual(values = rep("#4739a2", length(labels)), labels = labels) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
)
ggplot(data = app_v1_baseline_valid_family, aes(x = Familie, fill = Familie)) +
geom_bar(key_glyph = draw_key_blank) +
scale_fill_manual(values = rep("#4739a2", length(labels)), labels = labels) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt")
)
app_v1_baseline_valid_family <-
app_v1_baseline[app_v1_baseline$Familie %in%
c(0, 1, 2, 3, 4, 5), ]
app_v1_baseline_valid_family$Familie <-
ifelse(app_v1_baseline_valid_family$Familie %in% c(0,1),
"RS1",
ifelse(app_v1_baseline_valid_family$Familie == 2,
"RS2",
ifelse(app_v1_baseline_valid_family$Familie == 3,
"RS3", "RS4")))
level_order <- c("RS1",
"RS2",
"RS3",
"RS4")
labels <- c(RS1 = 'RS1 = Single',
RS2 = 'RS2 = Committed relationship and not registered',
RS3 = 'RS3 = Married/ Registered',
RS4 = 'RS4 = Divorced')
ggplot(data = app_v1_baseline_valid_family, aes(x = Familie, fill = Familie)) +
geom_bar(key_glyph = draw_key_blank) +
scale_fill_manual(values = rep("#4739a2", length(labels)), labels = labels) +
labs(title = paste0("Relationship status"),
subtitle = "Bar chart of participant relationship status",
caption = "Data source: TeamBaby",
fill = "Relationship status") +
xlab("Relatonship status") +
ylab("Count") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt")
)
## ---- prep-data
source("R/00_load_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_format_active_data.R")
source("R/01_format_passive_data.R")
source("R/02_format_active_data_feedback.R")
source("R/02_format_active_data_hapa.R")
source("R/02_format_active_data_safety.R")
source("R/02_format_baseline.R")
source("R/02_join_data.R")
source("R/03_prepare_data.R")
source("R/04_derive_variables.R")
source("R/04_process_app_use_data.R")
source("R/04_process_sentiment_data.R")
data_log_in <- final_data_key_vars[
!duplicated(final_data_key_vars[ ,c('version',
'UserCode')]),]
data_log_in$log_in_count_group <- ifelse(data_log_in$total_log_in == 1, 1,
ifelse(
data_log_in$total_log_in > 1 &
data_log_in$total_log_in < 6, "2 to 5",
"6+"))
ggplot(data = data_log_in) +
geom_bar(mapping = aes(x = log_in_count_group,
y = after_stat(prop),
group = version),
stat = "count",
fill = "#4739a2") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~ version) +
labs(title = paste0("Frequency of engagement"),
subtitle = "Bar chart of log ins per user",
caption = "Data source: TeamBaby") +
xlab("Log ins") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- log-ins-test
t_test_log_in <- t.test(total_log_in ~ version,
data_log_in,
var.equal=TRUE)
log_in_table <- data.frame(`Version 1` = t_test_log_in$estimate[[1]],
`Version 2` = t_test_log_in$estimate[[2]],
df = t_test_log_in$parameter[[1]],
`Test-statistic` = t_test_log_in$statistic[[1]],
`p-value` = ifelse(t_test_log_in$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_log_in$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(log_in_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average Log ins (per user)" = 2, "Independent t-test" = 3))
pages <- final_data_key_vars[!duplicated(final_data_key_vars[ ,c('version',
'UserCode')]),]
pages$proption_viewed <- ifelse(pages$version == "Version 1",
(pages$pages_viewed/141)*100,
(pages$pages_viewed/112)*100)
ggplot(pages, aes(x = proption_viewed, fill = version)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Intensity of engagement",
subtitle = "Distribution of pages viewed per participant",
caption = "Data source: TeamBaby") +
xlab("Proportion of pages viewed") +
ylab("Density") +
guides(fill = guide_legend(title = "Web-app Version")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543", face = "bold"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- pages-viewed-test
t_test_log_in_pages <- t.test(proption_viewed ~ version,
pages,
var.equal=TRUE)
pages_table <- data.frame(`Version 1` = t_test_log_in_pages$estimate[[1]],
`Version 2` = t_test_log_in_pages$estimate[[2]],
df = t_test_log_in_pages$parameter[[1]],
`Test-statistic` = t_test_log_in_pages$statistic[[1]],
`p-value` = ifelse(t_test_log_in_pages$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_log_in_pages$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(pages_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average pages viewed (proportion per user)" = 2, "Independent t-test" = 3))
lessons <- final_data_key_vars[
!duplicated(final_data_key_vars[ , c('version',
'UserCode')]),]
ggplot(data = lessons) +
geom_bar(mapping = aes(x = lessons_viewed,
y = ..prop..,
group = version),
stat = "count",
fill = "#4739a2") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~ version) +
labs(title = paste0("Intensity of engagement"),
subtitle = "Bar chart of lessons completed",
caption = "Data source: TeamBaby") +
xlab("Max lessons completed") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- lessons-viewed-test
t_test_lessons_viewed <- t.test(lessons_viewed ~ version,
lessons,
var.equal=TRUE)
lessons_viewed_table <- data.frame(`Version 1` = t_test_lessons_viewed$estimate[[1]],
`Version 2` = t_test_lessons_viewed$estimate[[2]],
df = t_test_lessons_viewed$parameter[[1]],
`Test-statistic` = t_test_lessons_viewed$statistic[[1]],
`p-value` = ifelse(t_test_lessons_viewed$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_lessons_viewed$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(lessons_viewed_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average lessons viewed (per user)" = 2, "Independent t-test" = 3))
open_items <- final_data_key_vars[
!duplicated(final_data_key_vars[ , c('version',
'UserCode')]),]
open_items$proportion_completed <- ifelse(open_items$version == "Version 1",
(open_items$total_open_items/91)*100,
(open_items$total_open_items/42)*100)
ggplot(open_items, aes(x = proportion_completed, fill = version)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Intensity of engagement",
subtitle = "Distribution of open ended items completed per participant",
caption = "Data source: TeamBaby") +
xlab("Proportion of open ended items completed") +
ylab("Density") +
guides(fill = guide_legend(title = "Web-app Version")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543", face = "bold"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- open-items-test
t_test_open_items_viewed <- t.test(proportion_completed ~ version,
open_items,
var.equal=TRUE)
open_items_table <- data.frame(`Version 1` = t_test_open_items_viewed$estimate[[1]],
`Version 2` = t_test_open_items_viewed$estimate[[2]],
df = t_test_open_items_viewed$parameter[[1]],
`Test-statistic` = t_test_open_items_viewed$statistic[[1]],
`p-value` = ifelse(t_test_open_items_viewed$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_open_items_viewed$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(open_items_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average open-ended items completed (proportion per user)" = 2, "Independent t-test" = 3))
action_plan <- final_data_key_vars[
!duplicated(final_data_key_vars[ , c('version',
'UserCode')]),]
action_plan$action_plan <- ifelse(action_plan$action_plan == 0, "No", "Yes")
ggplot(data = action_plan) +
geom_bar(mapping = aes(x = action_plan,
y = after_stat(prop),
group = version),
stat = "count",
fill = "#4739a2") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~ version) +
labs(title = paste0("Intensity of engagement"),
subtitle = "Bar chart of action plans completed",
caption = "Data source: TeamBaby") +
xlab("Action plans completed") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- action-plans-test
chisq_action_plan <- chisq.test(action_plan$version,
action_plan$action_plan,
correct=FALSE)
action_plan_table <- data.frame(`Version 1` = (chisq_action_plan$observed[[3]])/(chisq_action_plan$observed[[1]] + chisq_action_plan$observed[[3]]) * 100,
`Version 2` = (chisq_action_plan$observed[[4]])/(chisq_action_plan$observed[[2]] + chisq_action_plan$observed[[4]]) * 100,
df = chisq_action_plan$parameter[[1]],
`Test-statistic` = chisq_action_plan$statistic[[1]],
`p-value` = ifelse(chisq_action_plan$p.value[[1]] < 0.001, "< 0.001",
ifelse(chisq_action_plan$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(action_plan_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Action plan completed (proportion of users)" = 2, "Independent t-test" = 3))
time_visit <- final_data_key_vars[
!duplicated(final_data_key_vars[ , c('version',
'UserCode',
'log_in_count')]),]
ggplot(time_visit, aes(x = time_spent_visit, fill = version)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Duration of engagement",
subtitle = "Distribution of time spent per visit",
caption = "Data source: TeamBaby") +
xlab("Time spent per visit (minutes)") +
ylab("Density") +
guides(fill = guide_legend(title = "Web-app Version")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543", face = "bold"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- time-spent-test
t_test_time_spent <- t.test(time_spent_visit ~ version,
time_visit,
var.equal=TRUE)
time_spent_table <- data.frame(V1_mean = t_test_time_spent$estimate[[1]],
V2_mean = t_test_time_spent$estimate[[2]],
df = t_test_time_spent$parameter[[1]],
test_statistic = t_test_time_spent$statistic[[1]],
p_value = ifelse(t_test_time_spent$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_time_spent$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(time_spent_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average time spent (per log-in and user)" = 2, "Independent t-test" = 3))
days_data <- final_data[
!duplicated(final_data[ , c(
'version',
'UserCode')]),]
days_data <- final_data[
!duplicated(final_data[ , c(
'version',
'UserCode')]),]
days_data$days_group <- ifelse(days_data$days_between == 0, "1 day",
ifelse(
days_data$days_between > 0 &
days_data$days_between <= 7, "1 week",
ifelse(
days_data$days_between > 8 &
days_data$days_between < 31, "1 month",
"Month +")))
level_order <- c('1 day', '1 week', '1 month', 'Month +')
ggplot(data = days_data) +
geom_bar(mapping = aes(x = factor(days_group, levels = level_order),
y = ..prop..,
group = version),
stat = "count",
fill = "#4739a2") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~ version) +
labs(title = paste0("Frequency of engagement"),
subtitle = "Bar chart of duration of use",
caption = "Data source: TeamBaby") +
xlab("Duration of use") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
## ---- days-between-test
t_test_days_between <- t.test(days_between ~ version,
days_data,
var.equal=TRUE)
days_between_table <- data.frame(V1_mean = t_test_days_between$estimate[[1]],
V2_mean = t_test_days_between$estimate[[2]],
df = t_test_days_between$parameter[[1]],
test_statistic = t_test_days_between$statistic[[1]],
p_value = ifelse(t_test_days_between$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_days_between$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(days_between_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average duration of use (days per user)" = 2, "Independent t-test" = 3))
## ---- log-ins-test
t_test_log_in <- t.test(total_log_in ~ version,
data_log_in,
var.equal=TRUE)
log_in_table <- data.frame(`Version 1` = t_test_log_in$estimate[[1]],
`Version 2` = t_test_log_in$estimate[[2]],
df = t_test_log_in$parameter[[1]],
`Test-statistic` = t_test_log_in$statistic[[1]],
`p-value` = ifelse(t_test_log_in$p.value[[1]] < 0.001, "< 0.001",
ifelse(t_test_log_in$p.value[[1]] < 0.05, "< 0.05", "not sig.")))
kbl(log_in_table) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c("Average Log ins (per user)" = 2, "Independent t-test" = 3))
data_log_in <- final_data_key_vars[
!duplicated(final_data_key_vars[ ,c('version',
'UserCode')]),]
data_log_in$log_in_count_group <- ifelse(data_log_in$total_log_in == 1, 1,
ifelse(
data_log_in$total_log_in > 1 &
data_log_in$total_log_in < 6, "2 to 5",
"6+"))
ggplot(data = data_log_in) +
geom_bar(mapping = aes(x = log_in_count_group,
y = after_stat(prop),
group = version),
stat = "count",
fill = "#4739a2") +
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~ version) +
labs(title = paste0("Frequency of engagement"),
subtitle = "Bar chart of log ins per user",
caption = "Data source: TeamBaby") +
xlab("Log ins") +
ylab("Proportion") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
getwd()
ls()
